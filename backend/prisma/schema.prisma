generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  PROFESSIONAL
  ADMIN
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  lastname     String
  age          Float
  email        String        @unique
  password     String
  location     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  //Relaciones
  role         UserRole      @default(USER)
  professional Professional?
  bookings     Booking[]
  reviews      Review[]

  @@map("users")
}

model Professional {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @unique @db.ObjectId
  profession String
  education  String
  certified  String
  experience String
  skills     String[]
  rating     Float     @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  //Realaciones
  services   Service[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking    Booking[]

  @@map("professionals")
}

model Service {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  price          Float
  category       String
  featured       Boolean
  availability   Boolean      @default(true)
  professionalId String       @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  //Relacione s
  booking        Booking[]
  professional   Professional @relation(fields: [professionalId], references: [id])
  review         Review[]

  @@map("services")
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model Booking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  professionalId String?       @db.ObjectId
  serviceId      String?       @db.ObjectId
  date           DateTime
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String?       @db.ObjectId
  //Relaciones
  status         BookingStatus @default(PENDING)
  service        Service?      @relation(fields: [serviceId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  review         Review?
  user           User?         @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId      String   @unique @db.ObjectId
  userId         String   @db.ObjectId
  serviceId      String   @db.ObjectId
  professionalId String   @db.ObjectId
  rating         Float
  comment        String
  likes          Int?     @default(0)
  response       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  //Relaciones
  user           User     @relation(fields: [userId], references: [id])
  service        Service  @relation(fields: [serviceId], references: [id])
  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
