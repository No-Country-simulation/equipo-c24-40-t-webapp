generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  PROFESSIONAL
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  lastname         String
  age              Float
  email            String            @unique
  password         String
  location         String?
  role             UserRole          @default(CLIENT)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  clientData       ClientData?
  professionalData ProfessionalData?
  bookings         Booking[]
  reviews          Review[]

  @@map("users")
}

model ClientData {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @unique @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services  Service[]
  booking   Booking[]

  @@map("client_data")
}

model ProfessionalData {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @unique @db.ObjectId
  profession String
  education  String
  certified  String
  experience String
  skills     String[]
  rating     Float     @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Service    Service[]
  Booking    Booking[]

  @@map("professional_data")
}

model Service {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  price          Float
  category       String
  featured       Boolean
  availability   Boolean          @default(true)
  professionalId String           @db.ObjectId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  booking        Booking[]
  // Revisar el null de como retorna ProfessionalData
  professional   ProfessionalData @relation(fields: [professionalId], references: [id])
  review         Review[]
  ClientData     ClientData?      @relation(fields: [clientDataId], references: [id])
  clientDataId   String?          @db.ObjectId

  @@map("services")
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

model Booking {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  professionalId String?           @db.ObjectId
  serviceId      String?           @db.ObjectId
  date           DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  userId         String?           @db.ObjectId
  status         BookingStatus     @default(PENDING)
  service        Service?          @relation(fields: [serviceId], references: [id])
  professional   ProfessionalData? @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  review         Review?
  user           User?             @relation(fields: [userId], references: [id])
  clientData     ClientData?       @relation(fields: [clientDataId], references: [id])
  clientDataId   String?           @db.ObjectId

  @@map("bookings")
}

model Review {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId      String   @unique @db.ObjectId
  userId         String   @db.ObjectId
  serviceId      String   @db.ObjectId
  professionalId String   @db.ObjectId
  rating         Float
  comment        String
  likes          Int?     @default(0)
  response       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  service        Service  @relation(fields: [serviceId], references: [id])
  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
